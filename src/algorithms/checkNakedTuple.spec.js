import { checkNakedTuple } from './checkNakedTuple'

describe('algorithms/checkNakedTuple', () => {
    describe('naked pairs', () => {
        it('should find an update in the first row', () => {
            const helpers = [
                [[1, 2, 3], [1, 4], [5, 9], [2, 5], [1, 2, 9], [5, 9], [4, 7], [1, 8], [1, 8, 9]],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
            ]

            const result = checkNakedTuple(helpers)

            expect(result).not.toBeNull()
            expect(result.helpers).toEqual([
                {
                    col: 3,
                    row: 0,
                    values: [2],
                },
                {
                    col: 4,
                    row: 0,
                    values: [1, 2],
                },
                {
                    col: 8,
                    row: 0,
                    values: [1, 8],
                },
            ])
        })

        it('should find an update in the first col', () => {
            const helpers = [
                [[1, 2, 3], [], [], [], [], [], [], [], []],
                [[1, 4], [], [], [], [], [], [], [], []],
                [[5, 9], [], [], [], [], [], [], [], []],
                [[2, 5], [], [], [], [], [], [], [], []],
                [[1, 2, 9], [], [], [], [], [], [], [], []],
                [[5, 9], [], [], [], [], [], [], [], []],
                [[4, 7], [], [], [], [], [], [], [], []],
                [[1, 8], [], [], [], [], [], [], [], []],
                [[1, 8, 9], [], [], [], [], [], [], [], []],
            ]

            const result = checkNakedTuple(helpers)

            expect(result).not.toBeNull()
            expect(result.helpers).toEqual([
                {
                    col: 0,
                    row: 3,
                    values: [2],
                },
                {
                    col: 0,
                    row: 4,
                    values: [1, 2],
                },
                {
                    col: 0,
                    row: 8,
                    values: [1, 8],
                },
            ])
        })

        it('should find an update in the first square', () => {
            const helpers = [
                [[1, 2, 3], [1, 4], [5, 9], [], [], [], [], [], []],
                [[2, 5], [1, 2, 9], [5, 9], [], [], [], [], [], []],
                [[4, 7], [1, 8], [1, 8, 9], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
                [[], [], [], [], [], [], [], [], []],
            ]

            const result = checkNakedTuple(helpers)

            expect(result).not.toBeNull()
            expect(result.helpers).toEqual([
                {
                    col: 0,
                    row: 1,
                    values: [2],
                },
                {
                    col: 1,
                    row: 1,
                    values: [1, 2],
                },
                {
                    col: 2,
                    row: 2,
                    values: [1, 8],
                },
            ])
        })
    })

    describe('naked triples', () => {
        it('should find an update', () => {
            const helpers = [
                [[1, 2, 9], [], [], [], [], [], [], [], []],
                [[1, 4], [], [], [], [], [], [], [], []],
                [[1, 2, 9], [], [], [], [], [], [], [], []],
                [[2, 5], [], [], [], [], [], [], [], []],
                [[1, 2, 9], [], [], [], [], [], [], [], []],
                [[6, 9], [], [], [], [], [], [], [], []],
                [[4, 7], [], [], [], [], [], [], [], []],
                [[1, 8], [], [], [], [], [], [], [], []],
                [[1, 3, 9], [], [], [], [], [], [], [], []],
            ]

            const result = checkNakedTuple(helpers)

            expect(result).not.toBeNull()
            expect(result.helpers).toEqual([
                {
                    col: 0,
                    row: 1,
                    values: [4],
                },
                {
                    col: 0,
                    row: 3,
                    values: [5],
                },
                {
                    col: 0,
                    row: 5,
                    values: [6],
                },
                {
                    col: 0,
                    row: 7,
                    values: [8],
                },
                {
                    col: 0,
                    row: 8,
                    values: [3],
                },
            ])
        })
    })

    describe('naked quads', () => {
        it('should find an update', () => {
            const helpers = [
                [[1, 2, 3], [], [], [], [], [], [], [], []],
                [[1, 4, 9], [], [], [], [], [], [], [], []],
                [[1, 2, 5, 9], [], [], [], [], [], [], [], []],
                [[2, 7], [], [], [], [], [], [], [], []],
                [[1, 2, 5, 9], [], [], [], [], [], [], [], []],
                [[1, 2, 5, 9], [], [], [], [], [], [], [], []],
                [[4, 7], [], [], [], [], [], [], [], []],
                [[1, 8], [], [], [], [], [], [], [], []],
                [[1, 2, 5, 9], [], [], [], [], [], [], [], []],
            ]

            const result = checkNakedTuple(helpers)

            expect(result).not.toBeNull()
            expect(result.helpers).toEqual([
                {
                    col: 0,
                    row: 0,
                    values: [3],
                },
                {
                    col: 0,
                    row: 1,
                    values: [4],
                },
                {
                    col: 0,
                    row: 3,
                    values: [7],
                },
                {
                    col: 0,
                    row: 7,
                    values: [8],
                },
            ])
        })
    })

    it('should return null if it can\'t find a solution', () => {
        const helpers = [
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
        ]

        const result = checkNakedTuple(helpers)

        expect(result).toBeNull()
    })

    it('should return null if helpers are empty', () => {
        const helpers = [
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
        ]

        const result = checkNakedTuple(helpers)

        expect(result).toBeNull()
    })
})
