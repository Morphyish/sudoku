import { checkHiddenPair } from './checkHiddenPair'

describe('algorithms/checkHiddenPair', () => {
    it('should find an update in the first row', () => {
        const helpers = [
            [[1, 4], [2, 4], [5, 7, 9], [], [1, 5, 9], [], [3, 6, 8], [4, 6, 8, 9], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
        ]

        const result = checkHiddenPair(helpers)

        expect(result).not.toBeNull()
        expect(result.helpers).toEqual([
            {
                col: 6,
                row: 0,
                values: [6, 8],
            },
            {
                col: 7,
                row: 0,
                values: [6, 8],
            },
        ])
    })

    it('should find an update in the first col', () => {
        const helpers = [
            [[1, 4], [], [], [], [], [], [], [], []],
            [[2, 4], [], [], [], [], [], [], [], []],
            [[5, 7, 9], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[1, 5, 9], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[3, 6, 8], [], [], [], [], [], [], [], []],
            [[4, 6, 8, 9], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
        ]

        const result = checkHiddenPair(helpers)

        expect(result).not.toBeNull()
        expect(result.helpers).toEqual([
            {
                col: 0,
                row: 6,
                values: [6, 8],
            },
            {
                col: 0,
                row: 7,
                values: [6, 8],
            },
        ])
    })

    it('should find an update in the first square', () => {
        const helpers = [
            [[1, 4], [2, 4], [5, 7, 9], [], [], [], [], [], []],
            [[], [1, 5, 9], [], [], [], [], [], [], []],
            [[3, 6, 8], [4, 6, 8, 9], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
        ]

        const result = checkHiddenPair(helpers)

        expect(result).not.toBeNull()
        expect(result.helpers).toEqual([
            {
                col: 0,
                row: 2,
                values: [6, 8],
            },
            {
                col: 1,
                row: 2,
                values: [6, 8],
            },
        ])
    })

    it('should return null if it can\'t find a solution', () => {
        const helpers = [
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
        ]

        const result = checkHiddenPair(helpers)

        expect(result).toBeNull()
    })

    it('should return null if helpers are empty', () => {
        const helpers = [
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
        ]

        const result = checkHiddenPair(helpers)

        expect(result).toBeNull()
    })
})
