import { sectorUpdate } from './sectorUpdate'

describe('algorithms/sectorUpdate', () => {
    it('should find an update in the first row', () => {
        const helpers = [
            [[1], [1], [1], [1], [1], [1, 2], [1], [1], [1]],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
        ]

        const result = sectorUpdate(helpers)

        expect(result).not.toBeNull()
        expect(result.grid).toEqual({
            col: 5,
            row: 0,
            value: 2,
        })
    })

    it('should find an update in the first col', () => {
        const helpers = [
            [[1], [], [], [], [], [], [], [], []],
            [[1], [], [], [], [], [], [], [], []],
            [[1, 2], [], [], [], [], [], [], [], []],
            [[1], [], [], [], [], [], [], [], []],
            [[1], [], [], [], [], [], [], [], []],
            [[1], [], [], [], [], [], [], [], []],
            [[1], [], [], [], [], [], [], [], []],
            [[1], [], [], [], [], [], [], [], []],
            [[1], [], [], [], [], [], [], [], []],
        ]

        const result = sectorUpdate(helpers)

        expect(result).not.toBeNull()
        expect(result.grid).toEqual({
            col: 0,
            row: 2,
            value: 2,
        })
    })

    it('should find an update in the first square', () => {
        const helpers = [
            [[1], [1], [1], [], [], [], [], [], []],
            [[1], [1], [1, 2], [], [], [], [], [], []],
            [[1], [1], [1], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
        ]

        const result = sectorUpdate(helpers)

        expect(result).not.toBeNull()
        expect(result.grid).toEqual({
            col: 2,
            row: 1,
            value: 2,
        })
    })

    it('should return null if it can\'t find a solution', () => {
        const helpers = [
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
            [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]],
        ]

        const result = sectorUpdate(helpers)

        expect(result).toBeNull()
    })

    it('should return null if helpers are empty', () => {
        const helpers = [
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
            [[], [], [], [], [], [], [], [], []],
        ]

        const result = sectorUpdate(helpers)

        expect(result).toBeNull()
    })
})

jest.mock('../utils', () => ({
    ...jest.requireActual('../utils'),
    shuffle: jest.fn(),
}))
